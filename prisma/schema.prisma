// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Notificacao {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  mensagem  String
  data      DateTime @default(now())
  usuario   Usuario? @relation(fields: [usuarioId], references: [id])
  usuarioId String?  @db.ObjectId
}

model Usuario {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  nome          String
  email         String         @unique
  senha         String
  endereco      String?
  notificacoes  Notificacao[]
  avaliacoes    Avaliacao[]
  preferencia   Preferencia?
  recomendacoes Recomendacao[]
}

model Recomendacao {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  data             DateTime        @default(now())
  usuario          Usuario?        @relation(fields: [usuarioId], references: [id])
  usuarioId        String?         @db.ObjectId
  pontoTuristico   PontoTuristico? @relation(fields: [pontoTuristicoId], references: [id])
  pontoTuristicoId String?         @db.ObjectId
}

// model Endereco {
//   id             String          @id @map("_id") @db.ObjectId
//   rua            String?
//   numero         String?
//   bairro         String?
//   cep            String?
//   estado         String?
//   pais           String?
//   cidade         String?
//   usuario        Usuario?
//   pontoTuristico PontoTuristico?
// }

model Avaliacao {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  nota             Int
  comentario       String
  data             DateTime        @default(now())
  usuario          Usuario?        @relation(fields: [usuarioId], references: [id])
  usuarioId        String?         @db.ObjectId
  pontoTuristico   PontoTuristico? @relation(fields: [pontoTuristicoId], references: [id])
  pontoTuristicoId String?         @db.ObjectId
}

model Preferencia {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  data              DateTime
  preco             Float
  usuario           Usuario?         @relation(fields: [usuarioId], references: [id])
  usuarioId         String?          @unique @db.ObjectId
  pontosTuristicos  PontoTuristico[] @relation(fields: [pontoTuristicoIds], references: [id])
  pontoTuristicoIds String[]         @db.ObjectId
}

model Viagem {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  preco            Float
  descricao        String
  pontoTuristico   PontoTuristico? @relation(fields: [pontoTuristicoId], references: [id])
  pontoTuristicoId String?         @db.ObjectId
}

model Categoria {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  categoria         String           @unique
  pontosTuristicos  PontoTuristico[] @relation(fields: [pontoTuristicoIds], references: [id])
  pontoTuristicoIds String[]         @db.ObjectId
}

model PontoTuristico {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  nome           String
  descricao      String
  endereco       String?
  location       Json?
  avaliacoes     Avaliacao[]
  recomendacoes  Recomendacao[]
  preferencias   Preferencia[]  @relation(fields: [preferenciaIds], references: [id])
  preferenciaIds String[]       @db.ObjectId
  viagens        Viagem[]
  categorias     Categoria[]    @relation(fields: [categoriaIds], references: [id])
  categoriaIds   String[]       @db.ObjectId
}
